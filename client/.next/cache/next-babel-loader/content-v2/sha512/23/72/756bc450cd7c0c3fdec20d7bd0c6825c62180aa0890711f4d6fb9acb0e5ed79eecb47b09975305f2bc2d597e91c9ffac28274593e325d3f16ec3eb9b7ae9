{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Developer\\\\Desktop\\\\testProject\\\\learnhub\\\\client\\\\pages\\\\course\\\\[slug].js\";\nimport { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { useRouter } from \"next/router\";\nimport SingleCourseJumbotron from \"../../components/cards/SingleCourseJumbotron\";\nimport PreviewModal from \"../../components/modal/PreviewModal\";\nimport SingleCourseLessons from \"../../components/cards/SingleCourseLessons\";\nimport { Context } from \"../../context\";\nimport { toast } from \"react-toastify\";\n\nconst SingleCourse = ({\n  course\n}) => {\n  // estado\n  const {\n    0: showModal,\n    1: setShowModal\n  } = useState(false);\n  const {\n    0: preview,\n    1: setPreview\n  } = useState(\"\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: enrolled,\n    1: setEnrolled\n  } = useState({}); // contexto\n\n  const {\n    state: {\n      user\n    }\n  } = useContext(Context);\n  useEffect(() => {\n    if (user && course) checkEnrollment();\n  }, [user, course]);\n\n  const checkEnrollment = async () => {\n    const {\n      data\n    } = await axios.get(`/api/check-enrollment/${course._id}`);\n    console.log(\"VERIFICAR INSCRIPCIÓN\", data);\n    setEnrolled(data);\n  };\n\n  const router = useRouter();\n  const {\n    slug\n  } = router.query;\n\n  const handlePaidEnrollment = async () => {\n    try {\n      setLoading(true); // verificar si el usuario ha iniciado sesión\n\n      if (!user) router.push(\"/login\"); // verificar si ya está inscrito\n\n      if (enrolled.status) return router.push(`/user/course/${enrolled.course.slug}`);\n      const {\n        data\n      } = await axios.post(`/api/paid-enrollment/${course._id}`);\n      const stripe = await loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\n      stripe.redirectToCheckout({\n        sessionId: data\n      });\n    } catch (err) {\n      toast(\"Error en la inscripción, inténtalo de nuevo.\");\n      console.log(err);\n      setLoading(false);\n    }\n  };\n\n  const handleFreeEnrollment = async e => {\n    e.preventDefault();\n\n    try {\n      // verificar si el usuario ha iniciado sesión\n      if (!user) router.push(\"/login\"); // verificar si ya está inscrito\n\n      if (enrolled.status) return router.push(`/user/course/${enrolled.course.slug}`);\n      setLoading(true);\n      const {\n        data\n      } = await axios.post(`/api/free-enrollment/${course._id}`);\n      toast(data.message);\n      setLoading(false);\n      router.push(`/user/course/${data.course.slug}`);\n    } catch (err) {\n      toast(\"Error en la inscripción, inténtalo de nuevo.\");\n      console.log(err);\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SingleCourseJumbotron, {\n      course: course,\n      showModal: showModal,\n      setShowModal: setShowModal,\n      preview: preview,\n      setPreview: setPreview,\n      user: user,\n      loading: loading,\n      handlePaidEnrollment: handlePaidEnrollment,\n      handleFreeEnrollment: handleFreeEnrollment,\n      enrolled: enrolled,\n      setEnrolled: setEnrolled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PreviewModal, {\n      showModal: showModal,\n      setShowModal: setShowModal,\n      preview: preview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), course.lessons && /*#__PURE__*/_jsxDEV(SingleCourseLessons, {\n      lessons: course.lessons,\n      setPreview: setPreview,\n      showModal: showModal,\n      setShowModal: setShowModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\nexport async function getServerSideProps({\n  query\n}) {\n  const {\n    data\n  } = await axios.get(`${process.env.API}/course/${query.slug}`);\n  return {\n    props: {\n      course: data\n    }\n  };\n}\nexport default SingleCourse;","map":{"version":3,"sources":["C:/Users/Developer/Desktop/testProject/learnhub/client/pages/course/[slug].js"],"names":["useState","useEffect","useContext","axios","useRouter","SingleCourseJumbotron","PreviewModal","SingleCourseLessons","Context","toast","SingleCourse","course","showModal","setShowModal","preview","setPreview","loading","setLoading","enrolled","setEnrolled","state","user","checkEnrollment","data","get","_id","console","log","router","slug","query","handlePaidEnrollment","push","status","post","stripe","loadStripe","process","env","NEXT_PUBLIC_STRIPE_KEY","redirectToCheckout","sessionId","err","handleFreeEnrollment","e","preventDefault","message","lessons","getServerSideProps","API","props"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useRouter } from \"next/router\";\r\nimport SingleCourseJumbotron from \"../../components/cards/SingleCourseJumbotron\";\r\nimport PreviewModal from \"../../components/modal/PreviewModal\";\r\nimport SingleCourseLessons from \"../../components/cards/SingleCourseLessons\";\r\nimport { Context } from \"../../context\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nconst SingleCourse = ({ course }) => {\r\n    // estado\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [preview, setPreview] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [enrolled, setEnrolled] = useState({});\r\n    // contexto\r\n    const {\r\n        state: { user },\r\n    } = useContext(Context);\r\n\r\n    useEffect(() => {\r\n        if (user && course) checkEnrollment();\r\n    }, [user, course]);\r\n\r\n    const checkEnrollment = async () => {\r\n        const { data } = await axios.get(`/api/check-enrollment/${course._id}`);\r\n        console.log(\"VERIFICAR INSCRIPCIÓN\", data);\r\n        setEnrolled(data);\r\n    };\r\n\r\n    const router = useRouter();\r\n    const { slug } = router.query;\r\n\r\n    const handlePaidEnrollment = async () => {\r\n        try {\r\n            setLoading(true);\r\n            // verificar si el usuario ha iniciado sesión\r\n            if (!user) router.push(\"/login\");\r\n            // verificar si ya está inscrito\r\n            if (enrolled.status)\r\n                return router.push(`/user/course/${enrolled.course.slug}`);\r\n            const { data } = await axios.post(`/api/paid-enrollment/${course._id}`);\r\n            const stripe = await loadStripe(process.env.NEXT_PUBLIC_STRIPE_KEY);\r\n            stripe.redirectToCheckout({ sessionId: data });\r\n        } catch (err) {\r\n            toast(\"Error en la inscripción, inténtalo de nuevo.\");\r\n            console.log(err);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleFreeEnrollment = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            // verificar si el usuario ha iniciado sesión\r\n            if (!user) router.push(\"/login\");\r\n            // verificar si ya está inscrito\r\n            if (enrolled.status)\r\n                return router.push(`/user/course/${enrolled.course.slug}`);\r\n            setLoading(true);\r\n            const { data } = await axios.post(`/api/free-enrollment/${course._id}`);\r\n            toast(data.message);\r\n            setLoading(false);\r\n            router.push(`/user/course/${data.course.slug}`);\r\n        } catch (err) {\r\n            toast(\"Error en la inscripción, inténtalo de nuevo.\");\r\n            console.log(err);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* <pre>{JSON.stringify(course, null, 4)}</pre> */}\r\n            <SingleCourseJumbotron\r\n                course={course}\r\n                showModal={showModal}\r\n                setShowModal={setShowModal}\r\n                preview={preview}\r\n                setPreview={setPreview}\r\n                user={user}\r\n                loading={loading}\r\n                handlePaidEnrollment={handlePaidEnrollment}\r\n                handleFreeEnrollment={handleFreeEnrollment}\r\n                enrolled={enrolled}\r\n                setEnrolled={setEnrolled}\r\n            />\r\n\r\n            <PreviewModal\r\n                showModal={showModal}\r\n                setShowModal={setShowModal}\r\n                preview={preview}\r\n            />\r\n\r\n            {course.lessons && (\r\n                <SingleCourseLessons\r\n                    lessons={course.lessons}\r\n                    setPreview={setPreview}\r\n                    showModal={showModal}\r\n                    setShowModal={setShowModal}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps({ query }) {\r\n    const { data } = await axios.get(`${process.env.API}/course/${query.slug}`);\r\n    return {\r\n        props: {\r\n            course: data,\r\n        },\r\n    };\r\n}\r\n\r\nexport default SingleCourse;\r\n"]},"metadata":{},"sourceType":"module"}