let expressJwt,User,Course;_433‍.x([["requireSignin",()=>requireSignin],["isInstructor",()=>isInstructor],["isEnrolled",()=>isEnrolled]]);_433‍.w("express-jwt",[["default",["expressJwt"],function(v){expressJwt=v}]]);_433‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_433‍.w("../models/course",[["default",["Course"],function(v){Course=v}]]);



       const requireSignin = expressJwt({
    getToken: (req, res) => req.cookies.token,
    secret: process.env.JWT_SECRET,
    algorithms: ["HS256"],
});

       const isInstructor = async (req, res, next) => {
    try {
        const user = await User.findById(req.user._id).exec();
        if (!user.role.includes("Instructor")) {
            return res.sendStatus(403);
        } else {
            next();
        }
    } catch (err) {
        _433‍.g.console.log(err);
    }
};

       const isEnrolled = async (req, res, next) => {
    try {
        const user = await User.findById(req.user._id).exec();
        const course = await Course.findOne({ slug: req.params.slug }).exec();

        // Verificar si el id del curso se encuentra en el array de cursos del usuario
        let ids = [];
        for (let i = 0; i < user.courses.length; i++) {
            ids.push(user.courses[i].toString());
        }

        if (!ids.includes(course._id.toString())) {
            res.sendStatus(403);
        } else {
            next();
        }
    } catch (err) {
        _433‍.g.console.log(err);
    }
};
